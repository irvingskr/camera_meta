#!/usr/bin/env python
PACKAGE = "hk_camera"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Exposure
gen.add("exposure_value", double_t, 0, "Exposure time when not in auto mode", 100., 20., 30000.)
gen.add("exposure_min", double_t, 0, "Min exposure time(us)", 100., 20., 30000.)
gen.add("exposure_max", double_t, 0, "Max exposure time(us)", 5000., 20., 30000.)
gen.add("exposure_auto", bool_t, 0, "Auto exposure", True)

# Gain
gen.add("gain_value", double_t, 0, "Gain value(dB) when not in auto mode", 2., 0., 16.)
gen.add("gain_min", double_t, 0, "Min gain dB", 0., 0., 16.)
gen.add("gain_max", double_t, 0, "Max gain dB", 16., 0., 16.)
gen.add("gain_auto", bool_t, 0, "Auto Gain", True)

# White balance
channel = gen.enum([gen.const("Red", int_t, 0, "Red channel"),
                    gen.const("Green", int_t, 1, "Green channel"),
                    gen.const("Blue", int_t, 2, "Blue channel")],
                   "channel")
gen.add("white_selector", int_t, 0, "White balance channel selector", 0, 0, 2, edit_method=channel)
gen.add("white_value", double_t, 0, "White balance value(dB) when not in auto mode", 1., 1., 3000.)
gen.add("white_auto", bool_t, 0, "Auto white", True)

# Gamma
gamma_selector = gen.enum([gen.const("Gamma_auto", int_t, 0, "Gamma auto"),
                           gen.const("Gamma_user", int_t, 1, "Gamma user"),
                           gen.const("Gamma_off", int_t, 2, "Gamma off")],
                           "gamma_selector")
gen.add("gamma_selector", int_t, 0, "Gamma selector", 0, 0, 2, edit_method = gamma_selector)
gen.add("gamma_value", double_t, 0, "Gamma value", 0.7, 0., 4.)

gen.add("width_offset", int_t, 0, "Width offset", 0, 0, 300)

exit(gen.generate(PACKAGE, "hk_camera", "Camera"))
